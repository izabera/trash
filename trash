#!/usr/bin/env bash

# trash - by izabera
# also known as the least-portable-script-evur

# ISC license
# have fun

# The full path is base64'ed and then piped to  tr / _
# Advantages:
# -  it's possible to restore the file in the exact path it came from
# -  this won't create new subdirectories in the .trash folder
# Disadvantages:
# -  it looks stupid but there's no better way

# TODO:
#    trash directories
#    find a better way to create unique filenames
#    rc file (?)
#    tidy up this mess of return codes


fullpath=no
listheaders=yes
overwritefiles=no
recreatepath=no

source ~/.trashrc 2> /dev/null

mkdir -p ~/.trash # FIXME: users should configure this

shopt -s nullglob
returnvalue=0

printhelp () {
  cat << EOF
Usage: $0 [OPTION] [FILE|NUMBER]...

$0 is a trash bin utility.  If you use it instead of your regular rm,
your files will be moved to ~/.trash for later use.
Multiple files can be trashed or restored with a single command.

OPTION may be one of the following:

  -h|--help                 print this help and exit
  -l|--list                 list all files in your trash bin
  -r|--restore NUMBER...    restore files in their original path
  -c|--clean [NUMBER]...    remove (everything if NUMBER is not specified)
  -t|--trash FILE...        trash files (default)

EOF
}

[[ $# = 0 ]] && printhelp >&2 && exit 1

case "$1" in

  -h|--help)
    printhelp && exit 0 ;;

  -l|--list)
    files=(~/.trash/*)
    [[ ${#files[*]} = 0 ]] && echo "Recycle bin is empty" >&2 && exit 2
    if [[ $listheaders = yes ]] ; then 
      if [[ $fullpath = yes ]] ; then
        echo "  Id   | Date (YYYY-mm-dd HH:MM:SS) | Path"
      else
        echo "  Id   | Date (YYYY-mm-dd HH:MM:SS) | Filename"
      fi
      echo "-------+----------------------------+-------------"
    fi
    num=0
    for file in ~/.trash/* ; do
      file="${file##*/}"
      filename="${file:61}" #remove metadata
      filename="$(printf %s "$filename" | tr _ / | base64 -d)" #actual path+filename
      [[ $fullpath = no ]] && filename="${filename##*/}"
      datetime="${file::19}"
      datetime="${datetime/_/ }"
      printf "%06d |    %s     | %s\n" "$num" "$datetime" "$filename"
      ((num++))
    done
    ;;

  -r|--restore)
    [[ $# = 1 ]] && echo "No file specified" >&2 && exit 3
    files=(~/.trash/*)
    [[ ${#files[*]} = 0 ]] && echo "Recycle bin is empty" >&2 && exit 2
    shift
    for (( i = 0; i < $#; i++ )) ; do
      if printf "%d" "$1" &> /dev/null ; then
        if [[ -n "${files[$1]}" ]] ; then
          filename="${files[$1]##*/}"
          filename="${filename:61}"
          filename="$(printf %s "$filename" | tr _ / | base64 -d)"
          directory="${filename%/*}"
          if [[ -d "$directory" ]] ; then
            if [[ -f "$directory/${filename##*/}" ]] ; then
              tempfile="$(mktemp "/tmp/${files[$1]##*/}-XXXXXX")"
              echo "Couldn't restore $1 in its path, saved it in $tempfile" >&2
              # adding -- after each mv for forward compatibility
              # == when i'll edit stuff but i'll be lazy and i'll forget to check
              mv -- "${files[$1]}" "$tempfile"
              returnvalue=8
            elif ! mv -- "${files[$1]}" "$directory/${filename##*/}" 2> /dev/null ; then
              tempfile="$(mktemp "/tmp/${files[$1]##*/}-XXXXXX")"
              echo "Couldn't restore $1 in its path, saved it in $tempfile" >&2
              mv -- "${files[$1]}" "$tempfile"
              returnvalue=6
            fi
          else
            tempfile="$(mktemp "/tmp/${files[$1]##*/}-XXXXXX")"
            echo "Couldn't restore $1 in its path, saved it in $tempfile" >&2
            mv -- "${files[$1]}" "$tempfile"
            returnvalue=7
          fi
        else
          echo "Couldn't restore $1: file not found" >&2
          returnvalue=5
        fi
      else
        echo "Couldn't restore $1: not a number" >&2
        returnvalue=2
      fi
      shift
    done
    ;;

  -c|--clean)
    if [[ $# = 1 ]] ; then
      if ! rm -rf ~/.trash/* ; then
        echo "Couldn't empty the trash bin" >&2
        returnvalue=4
      fi
    else
      shift
      files=(~/.trash/*)
      for (( i = 0; i < $#; i++ )) ; do
        if ! rm -- "${files[$i]}" 2> /dev/null ; then
          echo "Couldn't remove $i" >&2
          returnvalue=11
        fi
      done
    fi
    ;;

  # ugly workaround for --
  -*)
    if ! [[ $1 =~ ^-t|--trash|--$ ]] ; then
      printhelp >&2
      exit 10
    fi
    ;;&

  # yay for unnecessary options
  -t|--trash|--)
    shift ;&

  *)
    for (( i = 0; i < $#; i++ )) ; do
      # hi, i'm an ugly hack, please kill me
      if file="$(realpath -s "$1" 2> /dev/null)" ; then
        read sha dummy <<< $(printf %s "$file" | sha1sum)
        bfile=$(printf %s "$file" | base64 -w 0 | tr / _)
        datetime=$(date +%Y-%m-%d_%H:%M:%S)
        if ! mv -- "$file" "$HOME/.trash/$datetime-$sha-$bfile" 2> /dev/null ; then
          echo "Couldn't move $file to trash" >&2
          returnvalue=1
        fi
        shift
      else
        echo "Couldn't read $1" >&2
        returnvalue=9
      fi
    done
    ;;
esac

exit $returnvalue

